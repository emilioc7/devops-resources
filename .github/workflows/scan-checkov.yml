on:
  workflow_call:
    inputs:
      checkov_version:
        required: true
        type: string
      publicMessage:
        required: true
        type: string
    secrets:
      secretMessage:
        required: true
      ado_token_work_items:
        required: true

jobs:
  scan:
    name: Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install checkov==${{ inputs.checkov_version }}
      - name: CodeCheckout
        uses: actions/checkout@v3
      - name: List Directory Files
        run: |
          Get-ChildItem -Recurse
      - name: Run Checkov Scan Powershell
        continue-on-error: true
        run: |
          checkov --directory ${{ github.workspace }} --framework terraform --output cli --quiet | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          # checkov --directory ${{ github.workspace }} --framework terraform --output github_failed_only | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
          checkov --directory ${{ github.workspace }} --framework terraform --output sarif
      - name: PrintSarifResults
        run: |
          Get-Content -Path ./results.sarif | jq
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: results.sarif
          # Optional category for the results
          # Used to differentiate multiple results for one commit
          category: checkov-analysis-results
  retrieveCodeScanResults:
    name: GHCLICommand
    runs-on: ubuntu-latest
    needs: scan
    steps: 
      - name: ScanReport-pwsh-CLI
        shell: pwsh
        continue-on-error: true
        run: |
            dir env: | Format-List
            $ANALISIS_RESULTS = gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/emilioc7/checkov-example/code-scanning/analyses | ConvertFrom-Json
            # $ANALISIS_RESULTS | jq
            Write-Host "----- Latest Scan Result ID is $($ANALISIS_RESULTS[0].id) with date $($ANALISIS_RESULTS[0].created_at) - results_count[$($ANALISIS_RESULTS[0].results_count)], rules_count [$($ANALISIS_RESULTS[0].rules_count)] ----- `n"
            # $LATEST_RESULS_SARIF_FORMAT = gh api -H "Accept: application/sarif+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/emilioc7/checkov-example/code-scanning/analyses/$($ANALISIS_RESULTS[0].id)
            # $LATEST_RESULS_SARIF_FORMAT | jq

            $my_org = "https://dev.azure.com/emc-apps"
            $my_project = "EmilioCamachoProjects"

            "${{ secrets.ado_token_work_items }}" | az devops login --organization $my_org
            Write-Host "`n`n------------------------------------------------------------------------------------------------------------`n`n"

            az devops project list --organization "$my_org"

            Write-Host "`n`n------------------------------------------------------------------------------------------------------------`n`n"
            
            az boards work-item show --id "417" --org $my_org
            
            Write-Host "`n`n------------------------------------------------------------------------------------------------------------`n`n"

            az boards work-item create --title "Defect created from GitHub - $($ANALISIS_RESULTS[0].id)" --type "Bug" --organization $my_org --project $my_project --description "$($ANALISIS_RESULTS[0].id) - results_count[$($ANALISIS_RESULTS[0].results_count)], rules_count [$($ANALISIS_RESULTS[0].rules_count)]"
            Write-Host "`n`n------------------------------------------------------------------------------------------------------------`n`n"

        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # AZURE_DEVOPS_EXT_PAT: ${{ secrets.ado_token_work_items }}
      - name: ScanReport-bash-CLI
        shell: bash
        continue-on-error: true
        if: false
        run: |
            set
            my_org="https://dev.azure.com/emc-apps"
            my_project="EmilioCamachoProjects"

            az devops project list --organization "$my_org"
            az boards work-item show --id "416" --org "$my_org"

            
            # gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/emilioc7/checkov-example/code-scanning/analyses
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AZURE_DEVOPS_EXT_PAT: ${{ secrets.ado_token_work_items }}
         
  extraCommands:
    name: ExtraComando
    runs-on: ubuntu-latest
    needs: scan
    defaults:
      run:
        shell: pwsh
    steps:
      - name: PowershellCommand1
        run: |
          dir env: | Format-List
      - name: PowershellCommand2
        run: |
          Write-Host "Publich Message is :"
          Write-Host ${{ inputs.publicMessage }}
          Write-Host "Secret Message is :"
          Write-Host ${{ secrets.secretMessage }}
